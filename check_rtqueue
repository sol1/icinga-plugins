#!/bin/bash -e

###############################################################################
set -e          # exit on command errors (so you MUST handle exit codes properly!)
set -E          # pass trap handlers down to subshells
#set -o pipefail # capture fail exit codes in piped commands
#set -x         # execution tracing debug messages

# Error handler
on_err() {
	echo ">> ERROR: $?"
	FN=0
	for LN in "${BASH_LINENO[@]}"; do
		[ "${FUNCNAME[$FN]}" = "main" ] && break
		echo ">> ${BASH_SOURCE[$FN]} $LN ${FUNCNAME[$FN]}"
		FN=$(( FN + 1 ))
	done
}
#trap on_err ERR

# Exit handler
declare -a EXIT_CMDS
add_exit_cmd() { EXIT_CMDS+="$*;  "; }
on_exit(){ eval "${EXIT_CMDS[@]}"; }
#trap on_exit EXIT

# Get command info
CMD_PWD=$(pwd)
CMD="$0"
CMD_DIR="$(cd "$(dirname "$CMD")" && pwd -P)"


# Defaults and command line options
[ "$VERBOSE" ] ||  VERBOSE=
[ "$DEBUG" ]   ||  DEBUG=
[ "$QUEUE" ]   ||  QUEUE=
[ "$WARN" ]    ||  WARN=0
[ "$CRIT" ]    ||  CRIT=0

#>>>> PUT YOUR ENV VAR DEFAULTS HERE <<<<
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

EXIT_CODE=$STATE_UNKNOWN
MESSAGE=""


# Basic helpers
out() { echo "$(date +%Y%m%dT%H%M%SZ): $*"; }
err() { out "$*" 1>&2; }
vrb() { [ ! "$VERBOSE" ] || out "$@"; }
dbg() { [ ! "$DEBUG" ] || err "$@"; }

# Script helpers
trimMessage() { MESSAGE="$(echo -e "${MESSAGE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' )"; }

# Show help function to be used below
show_help() {
	awk 'NR>1{print} /^(###|$)/{exit}' "$CMD"
	echo "USAGE: $(basename "$CMD") [arguments]"
	echo "ARGS:"
	MSG=$(awk '/^NARGS=-1; while/,/^esac; done/' "$CMD" | sed -e 's/^[[:space:]]*/  /' -e 's/|/, /' -e 's/)//' | grep '^  -')
	EMSG=$(eval "echo \"$MSG\"")
	echo "$EMSG"
}

# Parse command line options (odd formatting to simplify show_help() above)
NARGS=-1; while [ "$#" -ne "$NARGS" ]; do NARGS=$#; case $1 in
	# SWITCHES
	-h|--help)      # This help message
		show_help; exit 1; ;;
	-d|--debug)     # Enable debugging messages (implies verbose)
		DEBUG=$(( DEBUG + 1 )) && VERBOSE="$DEBUG" && shift && echo "#-INFO: DEBUG=$DEBUG (implies VERBOSE=$VERBOSE)"; ;;
	-v|--verbose)   # Enable verbose messages
		VERBOSE=$(( VERBOSE + 1 )) && shift && echo "#-INFO: VERBOSE=$VERBOSE"; ;;

	# PAIRS
	-q|--queue)     # Set a queue to a value (DEFAULT: $QUEUE)
		shift && QUEUE="$1" && shift && vrb "#-INFO: THING=$QUEUE"; ;;
	-w|--warn)     # Set a warn to a value (DEFAULT: $WARN)
		shift && WARN="$1" && shift && vrb "#-INFO: WARN=$WARN"; ;;
	-c|--crit)     # Set a crit to a value (DEFAULT: $CRIT)
		shift && CRIT="$1" && shift && vrb "#-INFO: CRIT=$CRIT"; ;;

	*)
		break;
esac; done

[ "$DEBUG" ]  &&  set -x

# Make sure required paramaters exit
if [ ! -z "$QUEUE" ] ; then

	# Set RT credentials as environment variables.
	export RTUSER=slamonitor
	export RTPASSWD=Q2aw34Q2aw34
	export RTSERVER=https://rt.sol1.net

	wdate=`date -d "$WARN minutes ago" "+%Y-%m-%d %H:%M:%S"`
	cdate=`date -d "$CRIT minutes ago" "+%Y-%m-%d %H:%M:%S"`

	# RT queries equal "" if there are no results, ticket is a sting that exists when there are tickets
	# Not sure how to test if the queries work
	wquery=`rt ls -q $QUEUE -i "Status=new and Created<'$wdate'" | grep "ticket" | wc -l`
	cquery=`rt ls -q $QUEUE -i "Status=new and Created<'$cdate'" | grep "ticket" | wc -l`

	if [ "$cquery" -gt 0 ]; then 
		MESSAGE="new tickets in $QUEUE : $cquery outside sla : `rt ls -q $QUEUE "Status=new" -f subject,created -r|sed '/^id.*$/d'`"
		EXIT_CODE=$STATE_CRITICAL
	elif [ "$wquery" -gt 0 ]; then
                MESSAGE="new tickets in $QUEUE : $wquery within sla : `rt ls -q $QUEUE "Status=new" -f subject,created -r|sed '/^id.*$/d'`"
                EXIT_CODE=$STATE_WARNING
	elif [ "$cquery" -eq 0 ] && [ "$wquery" -eq 0 ]; then
		MESSAGE="No new tickets in $QUEUE"
                EXIT_CODE=$STATE_OK
	else
		MESSAGE="Unexpected error"
	fi


else
	MESSAGE="No queue set"
fi

if [ $EXIT_CODE -eq $STATE_UNKNOWN ]; then
    MESSAGE="UNKNOWN - $MESSAGE"
elif [ $EXIT_CODE -eq $STATE_CRITICAL ]; then
    MESSAGE="CRITICAL - $MESSAGE"
elif [ $EXIT_CODE -eq $STATE_WARNING ]; then
    MESSAGE="WARNING - $MESSAGE"
elif [ $EXIT_CODE -eq $STATE_OK ]; then
    MESSAGE="OK - $MESSAGE"
fi

echo "$MESSAGE"
exit $EXIT_CODE

